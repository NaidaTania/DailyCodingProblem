Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.

For example, given the following Node class

class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
The following test should pass:

node = Node('root', Node('left', Node('left.left')), Node('right'))
assert deserialize(serialize(node)).left.left.val == 'left.left'


Related: https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

Surprisingly hacky solution: https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/1122263/python-or-JSON-or-intuitive 

Other sols:
- https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/1149331/Python-Postorder-traversal-and-saving-number-of-nodes
- https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/1132014/Python-BFS-Solution
- https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/1123121/Python-preorder-and-postorder-traversal-with-a-deque-and-List 

Resource:
- https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/ 